{"version":3,"sources":["components/Navbar.js","components/Card.js","components/Jumbotron.js","components/Wrapper.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","score","message","Card","alt","name","src","image","id","onClick","shuffleCharacters","Jumbotron","Wrapper","children","Footer","href","App","state","character","clickedCharacters","goal","_this","includes","setState","push","length","console","log","i","j","temp","Math","floor","random","shuffle","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","map","item","components_Card","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92f21cb3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Navbar.css\";\n\nfunction Navbar(props) {\n\n  return (\n    <nav className=\"navbar\">\n      <h3 className=\"nav-item\">\n      <span className=\"score\">Your Score: {props.score}</span>\n    </h3>\n    <h3 className=\"nav-item\">\n      <span className=\"message\">{props.message}</span>\n    </h3>\n    </nav>\n  );\n  }\n\n\nexport default Navbar;","import React from \"react\";\nimport \"../styles/Card.css\";\n\n// This component takes in props as an argument and returns whatever the props are defined as in App.js.\nconst Card = props => (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} id={props.id}\n                    // This onClick function is triggered when the image is clicked. It basically\n                    // calls the shuffleArt method which has a paramenter of the id of the image.\n                    onClick={() => props.shuffleCharacters(props.id)}\n                />\n            </div>\n        </div>\n  );\n  \n  export default Card;","import React from \"react\";\nimport \"../styles/Jumbotron.css\";\n\nfunction Jumbotron(props) {\n    return (\n<div className=\"jumbotron jumbotron-fluid\" id=\"jumbo\">\n  <div className=\"container\">\n    <h1 className=\"display-4 text-center\">Wild Kratts Memory Game</h1>\n    <h3 className=\"text-center\">Try to click each image one time.</h3>\n    <h3 className=\"text-center\">But watch out, they're on the move!</h3>\n  </div>\n</div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"../styles/Wrapper.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"../styles/Footer.css\";\n\nfunction Footer() {\n\n  return (\n    <footer className=\"footer mt-auto py-3\">\n        <div className=\"container text-center\">\n            <span> Created by \n            <a href=\"https://github.com/britt421\"> Brittany Taylor </a>\n            </span>\n        </div>\n    </footer>\n  );\n  }\n\n\nexport default Footer;","// Importing all components to use in App.js\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Card from \"./components/Card\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport character from \"./cards.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  // Setting the initial state. I am using the array of artwork images that is imported from cards.json.\n  state = {\n    character,\n    clickedCharacters: [],\n    score: 0,\n    goal: 12,\n    message: \"\"\n  };\n  // The shuffleCharacters method compares the id of the clicked image with one that is stored in the clickedCharacters array.\n  shuffleCharacters = id => {\n    let clickedCharacters = this.state.clickedCharacters;\n\n    // If the id of the clicked artwork ...\n    if(clickedCharacters.includes(id)) {\n      this.setState({ clickedCharacters: [], score: 0, message:  \"Oops - Try Again!\" });\n      return;\n    } else {\n      clickedCharacters.push(id)\n\n      if(clickedCharacters.length === 12) {\n        this.setState({score: 12, message: \"You Won!\", clickedCharacters: []});\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ character, clickedCharacters, score: clickedCharacters.length, message: \"\" });\n\n      // Fisher-Yates Shuffling Algorithm for shuffling items in my character array\n      const shuffle = character => {\n        var i,\n            j,\n            temp;\n        for (i = character.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = character[i];\n            character[i] = character[j];\n            character[j] = temp;\n        }\n         \n      };\n      shuffle(character);\n    }\n  }\n\n// Renders the imported Navbar with the current score and message, the Jumbotron,\n// the Wrapper, and the Footer. When rendering the Wrapper, it maps over this.state.character and renders a Card component for each character object.\nrender() {\n  return (\n    \n    <div>\n      <Navbar \n      score={this.state.score}\n      message={this.state.message} \n      />\n      <Jumbotron />\n      <Wrapper>\n        {this.state.character.map(item => (\n              <Card\n                shuffleCharacters={this.shuffleCharacters}\n                id={item.id}\n                key={item.name}\n                image={item.image}\n              />\n        ))}\n      </Wrapper>\n      <Footer />\n    </div>\n        \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}